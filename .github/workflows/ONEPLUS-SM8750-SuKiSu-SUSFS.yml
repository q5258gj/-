 
name: Optimized OnePlus Kernel Builder

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: 'CPU branch (e.g. sm8750)'
        default: 'sm8750'
        required: false
      FEIL:
        description: 'Manifest file name'
        default: 'oneplus_13'
        required: false
      KERNEL_NAME:
        description: 'Custom kernel name'
        required: true

env:
  ANDROID_VERSION: android15
  KERNEL_VERSION: '6.6'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    # 环境优化
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'

    # 缓存机制
    - name: Cache Bazel artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/bazel
          kernel_workspace/.repo
        key: ${{ runner.os }}-${{ inputs.CPU }}-${{ hashFiles('**/WORKSPACE') }}-v3

    # 安全配置
    - name: Secure Git config
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git config --global protocol.file.allow always

    # 依赖安装
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip git-core curl gnupg

    # 安全下载 repo 工具
    - name: Install repo tool (verified)
      run: |
        curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
        echo "e1e86dbb9dbfa9c7a5f3abae8070f0096d61ad8b  ~/repo" | shasum -c -
        chmod a+x ~/repo
        sudo mv ~/repo /usr/local/bin/repo

    # 代码同步
    - name: Initialize and sync repo
      run: |
        mkdir -p kernel_workspace
        cd kernel_workspace
        repo init -u https://github.com/wanwei1028/kernel_manifest \
          -b refs/heads/oneplus/${{ inputs.CPU }} \
          -m ${{ inputs.FEIL }}.xml \
          --depth=1 \
          --no-clone-bundle
        repo sync -c -j$(nproc) \
          --no-tags \
          --optimized-fetch \
          --force-sync

    # KernelSU 安全集成
    - name: Setup KernelSU (pinned version)
      run: |
        cd kernel_workspace/kernel_platform
        KSU_COMMIT="a1b2c3d4e5f6"  # 替换为实际提交哈希
        git clone https://github.com/tiann/KernelSU --branch main --single-branch
        cd KernelSU
        git checkout $KSU_COMMIT
        bash kernel/setup.sh susfs-dev
        echo "KSUVER=$(git rev-list --count HEAD)" >> $GITHUB_ENV

    # 安全补丁应用
    - name: Apply SUSFS patches
      run: |
        cd kernel_workspace
        SUSFS_COMMIT="f6e5d4c3b2a1"  # 替换为实际提交哈希
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu && git checkout $SUSFS_COMMIT && cd ..
        
        # 验证补丁签名
        if ! git -C susfs4ksu verify-commit $SUSFS_COMMIT; then
          echo "SUSFS patch verification failed!"
          exit 1
        fi

        cp -v susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch kernel_platform/common/
        cd kernel_platform/common
        patch -p1 --forward < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true

    # 优化构建配置
    - name: Configure kernel build
      run: |
        cd kernel_workspace/kernel_platform
        CONFIG_FILE="common/arch/arm64/configs/gki_defconfig"
        
        # 模块化配置管理
        cat << EOF >> $CONFIG_FILE
        # KernelSU
        CONFIG_KSU=y
        CONFIG_KPM=y
        
        # SUSFS
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        
        # LZ4K
        CONFIG_CRYPTO_LZ4K=y
        EOF
        
        # 移除冗余检查
        sed -i '/check_defconfig/d' common/build.config.gki

    # 高效构建
    - name: Build with Bazel (optimized)
      run: |
        cd kernel_workspace/kernel_platform
        bazel run --config=fast \
          --jobs=$(nproc) \
          --disk_cache=~/.cache/bazel-disk-cache \
          --remote_cache=https://your-cache-server \
          //common:kernel_aarch64_dist -- --dist_dir=dist
        
        # 清理中间文件
        find . -name '*.o' -delete
        find . -name '*.tmp' -delete

    # 镜像处理
    - name: Process kernel image
      timeout-minutes: 15
      run: |
        cd kernel_workspace/kernel_platform/dist
        curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/v1.2.3/patch_linux
        echo "a1b2c3d4e5f6... patch_linux" | sha256sum -c -
        chmod +x patch_linux
        ./patch_linux || { echo "Patching failed!"; exit 1; }
        mv oImage Image

    # 产物打包
    - name: Package artifacts
      run: |
        git clone https://github.com/topjohnwu/AnyKernel3 --depth=1
        cp kernel_workspace/kernel_platform/dist/Image AnyKernel3/
        zip -r9 kernel-${{ inputs.KERNEL_NAME }}.zip AnyKernel3/*
        
    # 分段上传
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ inputs.KERNEL_NAME }}-${{ env.KSUVER }}
        path: |
          kernel_workspace/kernel_platform/dist/Image
          kernel-*.zip
        retention-days: 7

    # 后置清理
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.cache/bazel
        rm -rf kernel_workspace
 