name: OnePlus SM8750 Build Pipeline
on:
  workflow_dispatch:
    inputs:
      DEVICE:
        description: "设备分支"
        required: true
        default: 'sm8750'
      CONFIG:
        description: "配置文件"
        required: true
        default: 'oneplus_13'
      KERNEL_TAG:
        description: "内核版本标签"
        required: true
        default: '6.6'
      KSU_VERSION:
        description: "KernelSU版本"
        required: true
        default: '10606'
      SUSFS_VERSION:
        description: "SUSFS版本"
        required: true
        default: 'gki-6.6-6.6'

jobs:
  build_kernel:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}/kernel_workspace
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Initialize Workspace
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Maximize Build Space
        uses: einverne/maximize-build-space-action@v2
        with:
          remove-android: true
          remove-dotnet: true
          remove-haskell: true

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            python3 git curl build-essential bc bison flex libssl-dev

      - name: Setup Repo Tool
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          export PATH=~/bin:$PATH

      - name: Initialize Kernel Repository
        run: |
          rm -rf $WORKSPACE
          mkdir -p $WORKSPACE
          cd $WORKSPACE
          repo init -u https://github.com/JiuGeFaCai/kernel_manifest.git \
            -b refs/heads/oneplus/${{ inputs.DEVICE }} \
            -m ${{ inputs.CONFIG }}.xml \
            --depth=1 --no-repo-verify

      - name: Sync Kernel Sources
        run: |
          cd $WORKSPACE
          repo sync -c -j$(nproc) --no-tags

      - name: Apply SukiSU Patches
        run: |
          local_version=$(grep -oP '^\d+\.\d+\.\d+' ../../../README.md)
          ksu_version=$((local_version + 10606))
          echo "KSUVER=${ksu_version}" >> $GITHUB_ENV

          cd $WORKSPACE/kernel_platform/KernelSU
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${ksu_version}/" Makefile

      - name: Apply SUSFS Patches
        run: |
          local_version=$(git describe --tags --abbrev=0)
          echo "SUSFS_VER=${local_version}" >> $GITHUB_ENV

          find $WORKSPACE/kernel_platform/common -type d \( -name 'fs' -o -name 'include/linux' -o -name 'crypto' \) -exec cp -r ../../../susfs4ksu/{}/* {} \;

          patch -p1 < ../../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.KERNEL_TAG }}.patch
          patch -p1 < ../../../SukiSU_patch/hooks/syscall_hooks.patch

      - name: Configure Kernel
        run: |
          cd $WORKSPACE/kernel_platform
          make O=out ARCH=arm64 gki_defconfig

          # Apply configuration overrides
          cat <<EOF >> out/.config
          CONFIG_KSU=y
          CONFIG_KPM=y
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          EOF

      - name: Build Kernel
        run: |
          cd $WORKSPACE/kernel_platform
          bazel build --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist

      - name: Prepare AnyKernel3
        run: |
          rm -rf $WORKSPACE/AnyKernel3
          git clone --depth=1 https://github.com/JiuGeFaCai/AnyKernel3.git $WORKSPACE/AnyKernel3

          cp $WORKSPACE/kernel_platform/out/dist/Image $WORKSPACE/AnyKernel3/
          chmod +x $WORKSPACE/AnyKernel3/zip.sh

      - name: Package Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SuKiSu_${{ env.KSUVER }}_${{ inputs.CONFIG }}
          path: |
            ${{ github.workspace }}/AnyKernel3/Image*
            ${{ github.workspace }}/kernel_platform/out/dist/Image

      - name: Clean Up
        if: always()
        run: |
          rm -rf $WORKSPACE
